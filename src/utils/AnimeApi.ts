//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class ApiClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @return Success
     */
    getAnime(id: number, cancelToken?: CancelToken | undefined): Promise<Anime> {
        let url_ = this.baseUrl + "/api/getAnime/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAnime(_response);
        });
    }

    protected processGetAnime(response: AxiosResponse): Promise<Anime> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Anime.fromJS(resultData200);
            return Promise.resolve<Anime>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Anime>(null as any);
    }

    /**
     * @return Success
     */
    getFranchise(id: number, cancelToken?: CancelToken | undefined): Promise<Franchise> {
        let url_ = this.baseUrl + "/api/getFranchise/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetFranchise(_response);
        });
    }

    protected processGetFranchise(response: AxiosResponse): Promise<Franchise> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Franchise.fromJS(resultData200);
            return Promise.resolve<Franchise>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Franchise>(null as any);
    }

    /**
     * @return Success
     */
    getSimilarAnime(id: number, cancelToken?: CancelToken | undefined): Promise<ShikimoriAnime[]> {
        let url_ = this.baseUrl + "/api/getSimilarAnime/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetSimilarAnime(_response);
        });
    }

    protected processGetSimilarAnime(response: AxiosResponse): Promise<ShikimoriAnime[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ShikimoriAnime.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ShikimoriAnime[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ShikimoriAnime[]>(null as any);
    }

    /**
     * @return Success
     */
    getRelatedAnime(id: number, cancelToken?: CancelToken | undefined): Promise<ShikimoriRelated[]> {
        let url_ = this.baseUrl + "/api/getRelatedAnime/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetRelatedAnime(_response);
        });
    }

    protected processGetRelatedAnime(response: AxiosResponse): Promise<ShikimoriRelated[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ShikimoriRelated.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ShikimoriRelated[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ShikimoriRelated[]>(null as any);
    }

    /**
     * @param query (optional) 
     * @return Success
     */
    searchAnime(query: string | undefined, cancelToken?: CancelToken | undefined): Promise<KodikAnime> {
        let url_ = this.baseUrl + "/api/searchAnime?";
        if (query === null)
            throw new Error("The parameter 'query' cannot be null.");
        else if (query !== undefined)
            url_ += "query=" + encodeURIComponent("" + query) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSearchAnime(_response);
        });
    }

    protected processSearchAnime(response: AxiosResponse): Promise<KodikAnime> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = KodikAnime.fromJS(resultData200);
            return Promise.resolve<KodikAnime>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<KodikAnime>(null as any);
    }

    /**
     * @param limit (optional) 
     * @param page (optional) 
     * @return Success
     */
    getPopularAnime(limit: number | undefined, page: number | undefined, cancelToken?: CancelToken | undefined): Promise<AnimePreview[]> {
        let url_ = this.baseUrl + "/api/getPopularAnime?";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPopularAnime(_response);
        });
    }

    protected processGetPopularAnime(response: AxiosResponse): Promise<AnimePreview[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AnimePreview.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<AnimePreview[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AnimePreview[]>(null as any);
    }

    /**
     * @param limit (optional) 
     * @param page (optional) 
     * @return Success
     */
    getTrendingAnime(limit: number | undefined, page: number | undefined, cancelToken?: CancelToken | undefined): Promise<AnimePreview[]> {
        let url_ = this.baseUrl + "/api/getTrendingAnime?";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTrendingAnime(_response);
        });
    }

    protected processGetTrendingAnime(response: AxiosResponse): Promise<AnimePreview[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AnimePreview.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<AnimePreview[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AnimePreview[]>(null as any);
    }

    /**
     * @param limit (optional) 
     * @param page (optional) 
     * @return Success
     */
    getJustReleasedAnime(limit: number | undefined, page: number | undefined, cancelToken?: CancelToken | undefined): Promise<AnimePreview[]> {
        let url_ = this.baseUrl + "/api/getJustReleasedAnime?";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetJustReleasedAnime(_response);
        });
    }

    protected processGetJustReleasedAnime(response: AxiosResponse): Promise<AnimePreview[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AnimePreview.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<AnimePreview[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AnimePreview[]>(null as any);
    }

    /**
     * @return Success
     */
    getUsersLeaderbord( cancelToken?: CancelToken | undefined): Promise<UserDto[]> {
        let url_ = this.baseUrl + "/api/users/getUsersLeaderbord";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetUsersLeaderbord(_response);
        });
    }

    protected processGetUsersLeaderbord(response: AxiosResponse): Promise<UserDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<UserDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserDto[]>(null as any);
    }

    /**
     * @return Success
     */
    getUser(username: string, cancelToken?: CancelToken | undefined): Promise<UserDto> {
        let url_ = this.baseUrl + "/api/users/getUser/{username}";
        if (username === undefined || username === null)
            throw new Error("The parameter 'username' must be defined.");
        url_ = url_.replace("{username}", encodeURIComponent("" + username));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetUser(_response);
        });
    }

    protected processGetUser(response: AxiosResponse): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserDto.fromJS(resultData200);
            return Promise.resolve<UserDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserDto>(null as any);
    }

    /**
     * @param username (optional) 
     * @param email (optional) 
     * @param password (optional) 
     * @param avatar (optional) 
     * @return Success
     */
    register(username: string | undefined, email: string | undefined, password: string | undefined, avatar: FileParameter | undefined, cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/users/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (username === null || username === undefined)
            throw new Error("The parameter 'username' cannot be null.");
        else
            content_.append("Username", username.toString());
        if (email === null || email === undefined)
            throw new Error("The parameter 'email' cannot be null.");
        else
            content_.append("Email", email.toString());
        if (password === null || password === undefined)
            throw new Error("The parameter 'password' cannot be null.");
        else
            content_.append("Password", password.toString());
        if (avatar === null || avatar === undefined)
            throw new Error("The parameter 'avatar' cannot be null.");
        else
            content_.append("Avatar", avatar.data, avatar.fileName ? avatar.fileName : "Avatar");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: LoginDto | undefined, cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/users/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param avatar (optional) 
     * @return Success
     */
    changeAvatar(avatar: FileParameter | undefined, cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/api/users/changeAvatar";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (avatar === null || avatar === undefined)
            throw new Error("The parameter 'avatar' cannot be null.");
        else
            content_.append("avatar", avatar.data, avatar.fileName ? avatar.fileName : "avatar");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processChangeAvatar(_response);
        });
    }

    protected processChangeAvatar(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return Success
     */
    getCurrentUser( cancelToken?: CancelToken | undefined): Promise<UserDto> {
        let url_ = this.baseUrl + "/api/users/getCurrentUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetCurrentUser(_response);
        });
    }

    protected processGetCurrentUser(response: AxiosResponse): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserDto.fromJS(resultData200);
            return Promise.resolve<UserDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserDto>(null as any);
    }

    /**
     * @param animeId (optional) 
     * @param userScore (optional) 
     * @return Success
     */
    addToWatched(animeId: number | undefined, userScore: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/users/addToWatched?";
        if (animeId === null)
            throw new Error("The parameter 'animeId' cannot be null.");
        else if (animeId !== undefined)
            url_ += "animeId=" + encodeURIComponent("" + animeId) + "&";
        if (userScore === null)
            throw new Error("The parameter 'userScore' cannot be null.");
        else if (userScore !== undefined)
            url_ += "userScore=" + encodeURIComponent("" + userScore) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddToWatched(_response);
        });
    }

    protected processAddToWatched(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param animeId (optional) 
     * @return Success
     */
    addToWatching(animeId: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/users/addToWatching?";
        if (animeId === null)
            throw new Error("The parameter 'animeId' cannot be null.");
        else if (animeId !== undefined)
            url_ += "animeId=" + encodeURIComponent("" + animeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddToWatching(_response);
        });
    }

    protected processAddToWatching(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param animeId (optional) 
     * @param episodeFinished (optional) 
     * @return Success
     */
    finishEpisode(animeId: number | undefined, episodeFinished: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/users/finishEpisode?";
        if (animeId === null)
            throw new Error("The parameter 'animeId' cannot be null.");
        else if (animeId !== undefined)
            url_ += "animeId=" + encodeURIComponent("" + animeId) + "&";
        if (episodeFinished === null)
            throw new Error("The parameter 'episodeFinished' cannot be null.");
        else if (episodeFinished !== undefined)
            url_ += "episodeFinished=" + encodeURIComponent("" + episodeFinished) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "PUT",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFinishEpisode(_response);
        });
    }

    protected processFinishEpisode(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param animeId (optional) 
     * @param secondsWatched (optional) 
     * @return Success
     */
    updateTimestamps(animeId: number | undefined, secondsWatched: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/users/updateTimestamps?";
        if (animeId === null)
            throw new Error("The parameter 'animeId' cannot be null.");
        else if (animeId !== undefined)
            url_ += "animeId=" + encodeURIComponent("" + animeId) + "&";
        if (secondsWatched === null)
            throw new Error("The parameter 'secondsWatched' cannot be null.");
        else if (secondsWatched !== undefined)
            url_ += "secondsWatched=" + encodeURIComponent("" + secondsWatched) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "PUT",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateTimestamps(_response);
        });
    }

    protected processUpdateTimestamps(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param animeId (optional) 
     * @return Success
     */
    removeFromWatching(animeId: number | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/users/removeFromWatching?";
        if (animeId === null)
            throw new Error("The parameter 'animeId' cannot be null.");
        else if (animeId !== undefined)
            url_ += "animeId=" + encodeURIComponent("" + animeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "DELETE",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRemoveFromWatching(_response);
        });
    }

    protected processRemoveFromWatching(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class Anime implements IAnime {
    shikimoriDetails?: AnimeID;
    kodikDetails?: KodikAnime;
    timestamps?: Show;

    constructor(data?: IAnime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shikimoriDetails = _data["shikimoriDetails"] ? AnimeID.fromJS(_data["shikimoriDetails"]) : <any>undefined;
            this.kodikDetails = _data["kodikDetails"] ? KodikAnime.fromJS(_data["kodikDetails"]) : <any>undefined;
            this.timestamps = _data["timestamps"] ? Show.fromJS(_data["timestamps"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Anime {
        data = typeof data === 'object' ? data : {};
        let result = new Anime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shikimoriDetails"] = this.shikimoriDetails ? this.shikimoriDetails.toJSON() : <any>undefined;
        data["kodikDetails"] = this.kodikDetails ? this.kodikDetails.toJSON() : <any>undefined;
        data["timestamps"] = this.timestamps ? this.timestamps.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAnime {
    shikimoriDetails?: AnimeID;
    kodikDetails?: KodikAnime;
    timestamps?: Show;
}

export class AnimeID implements IAnimeID {
    id?: number;
    name?: string | undefined;
    russian?: string | undefined;
    image?: Image;
    url?: string | undefined;
    kind?: string | undefined;
    score?: string | undefined;
    status?: string | undefined;
    airedOn?: Date | undefined;
    releasedOn?: Date | undefined;
    english?: string[] | undefined;
    japanese?: string[] | undefined;
    synonyms?: string[] | undefined;
    licenseNameRu?: string | undefined;
    description?: string | undefined;
    descriptionHtml?: string | undefined;
    descriptionSource?: string | undefined;
    franchise?: string | undefined;
    favoured?: boolean;
    anons?: boolean;
    ongoing?: boolean;
    threadId?: number | undefined;
    topicId?: number | undefined;
    myanimelistId?: number | undefined;
    ratesScoresStats?: Rate[] | undefined;
    ratesStatusesStats?: Rate[] | undefined;
    genres?: Genre[] | undefined;
    userRate?: PublicUserRate;
    episodes?: number;
    episodesAired?: number;
    rating?: string | undefined;
    duration?: number;
    updatedAt?: Date | undefined;
    nextEpisodeAt?: Date | undefined;
    studios?: Studio[] | undefined;
    videos?: Video[] | undefined;
    screens?: Screenshots[] | undefined;

    constructor(data?: IAnimeID) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.russian = _data["russian"];
            this.image = _data["image"] ? Image.fromJS(_data["image"]) : <any>undefined;
            this.url = _data["url"];
            this.kind = _data["kind"];
            this.score = _data["score"];
            this.status = _data["status"];
            this.airedOn = _data["airedOn"] ? new Date(_data["airedOn"].toString()) : <any>undefined;
            this.releasedOn = _data["releasedOn"] ? new Date(_data["releasedOn"].toString()) : <any>undefined;
            if (Array.isArray(_data["english"])) {
                this.english = [] as any;
                for (let item of _data["english"])
                    this.english!.push(item);
            }
            if (Array.isArray(_data["japanese"])) {
                this.japanese = [] as any;
                for (let item of _data["japanese"])
                    this.japanese!.push(item);
            }
            if (Array.isArray(_data["synonyms"])) {
                this.synonyms = [] as any;
                for (let item of _data["synonyms"])
                    this.synonyms!.push(item);
            }
            this.licenseNameRu = _data["licenseNameRu"];
            this.description = _data["description"];
            this.descriptionHtml = _data["descriptionHtml"];
            this.descriptionSource = _data["descriptionSource"];
            this.franchise = _data["franchise"];
            this.favoured = _data["favoured"];
            this.anons = _data["anons"];
            this.ongoing = _data["ongoing"];
            this.threadId = _data["threadId"];
            this.topicId = _data["topicId"];
            this.myanimelistId = _data["myanimelistId"];
            if (Array.isArray(_data["ratesScoresStats"])) {
                this.ratesScoresStats = [] as any;
                for (let item of _data["ratesScoresStats"])
                    this.ratesScoresStats!.push(Rate.fromJS(item));
            }
            if (Array.isArray(_data["ratesStatusesStats"])) {
                this.ratesStatusesStats = [] as any;
                for (let item of _data["ratesStatusesStats"])
                    this.ratesStatusesStats!.push(Rate.fromJS(item));
            }
            if (Array.isArray(_data["genres"])) {
                this.genres = [] as any;
                for (let item of _data["genres"])
                    this.genres!.push(Genre.fromJS(item));
            }
            this.userRate = _data["userRate"] ? PublicUserRate.fromJS(_data["userRate"]) : <any>undefined;
            this.episodes = _data["episodes"];
            this.episodesAired = _data["episodesAired"];
            this.rating = _data["rating"];
            this.duration = _data["duration"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.nextEpisodeAt = _data["nextEpisodeAt"] ? new Date(_data["nextEpisodeAt"].toString()) : <any>undefined;
            if (Array.isArray(_data["studios"])) {
                this.studios = [] as any;
                for (let item of _data["studios"])
                    this.studios!.push(Studio.fromJS(item));
            }
            if (Array.isArray(_data["videos"])) {
                this.videos = [] as any;
                for (let item of _data["videos"])
                    this.videos!.push(Video.fromJS(item));
            }
            if (Array.isArray(_data["screens"])) {
                this.screens = [] as any;
                for (let item of _data["screens"])
                    this.screens!.push(Screenshots.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AnimeID {
        data = typeof data === 'object' ? data : {};
        let result = new AnimeID();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["russian"] = this.russian;
        data["image"] = this.image ? this.image.toJSON() : <any>undefined;
        data["url"] = this.url;
        data["kind"] = this.kind;
        data["score"] = this.score;
        data["status"] = this.status;
        data["airedOn"] = this.airedOn ? this.airedOn.toISOString() : <any>undefined;
        data["releasedOn"] = this.releasedOn ? this.releasedOn.toISOString() : <any>undefined;
        if (Array.isArray(this.english)) {
            data["english"] = [];
            for (let item of this.english)
                data["english"].push(item);
        }
        if (Array.isArray(this.japanese)) {
            data["japanese"] = [];
            for (let item of this.japanese)
                data["japanese"].push(item);
        }
        if (Array.isArray(this.synonyms)) {
            data["synonyms"] = [];
            for (let item of this.synonyms)
                data["synonyms"].push(item);
        }
        data["licenseNameRu"] = this.licenseNameRu;
        data["description"] = this.description;
        data["descriptionHtml"] = this.descriptionHtml;
        data["descriptionSource"] = this.descriptionSource;
        data["franchise"] = this.franchise;
        data["favoured"] = this.favoured;
        data["anons"] = this.anons;
        data["ongoing"] = this.ongoing;
        data["threadId"] = this.threadId;
        data["topicId"] = this.topicId;
        data["myanimelistId"] = this.myanimelistId;
        if (Array.isArray(this.ratesScoresStats)) {
            data["ratesScoresStats"] = [];
            for (let item of this.ratesScoresStats)
                data["ratesScoresStats"].push(item.toJSON());
        }
        if (Array.isArray(this.ratesStatusesStats)) {
            data["ratesStatusesStats"] = [];
            for (let item of this.ratesStatusesStats)
                data["ratesStatusesStats"].push(item.toJSON());
        }
        if (Array.isArray(this.genres)) {
            data["genres"] = [];
            for (let item of this.genres)
                data["genres"].push(item.toJSON());
        }
        data["userRate"] = this.userRate ? this.userRate.toJSON() : <any>undefined;
        data["episodes"] = this.episodes;
        data["episodesAired"] = this.episodesAired;
        data["rating"] = this.rating;
        data["duration"] = this.duration;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["nextEpisodeAt"] = this.nextEpisodeAt ? this.nextEpisodeAt.toISOString() : <any>undefined;
        if (Array.isArray(this.studios)) {
            data["studios"] = [];
            for (let item of this.studios)
                data["studios"].push(item.toJSON());
        }
        if (Array.isArray(this.videos)) {
            data["videos"] = [];
            for (let item of this.videos)
                data["videos"].push(item.toJSON());
        }
        if (Array.isArray(this.screens)) {
            data["screens"] = [];
            for (let item of this.screens)
                data["screens"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnimeID {
    id?: number;
    name?: string | undefined;
    russian?: string | undefined;
    image?: Image;
    url?: string | undefined;
    kind?: string | undefined;
    score?: string | undefined;
    status?: string | undefined;
    airedOn?: Date | undefined;
    releasedOn?: Date | undefined;
    english?: string[] | undefined;
    japanese?: string[] | undefined;
    synonyms?: string[] | undefined;
    licenseNameRu?: string | undefined;
    description?: string | undefined;
    descriptionHtml?: string | undefined;
    descriptionSource?: string | undefined;
    franchise?: string | undefined;
    favoured?: boolean;
    anons?: boolean;
    ongoing?: boolean;
    threadId?: number | undefined;
    topicId?: number | undefined;
    myanimelistId?: number | undefined;
    ratesScoresStats?: Rate[] | undefined;
    ratesStatusesStats?: Rate[] | undefined;
    genres?: Genre[] | undefined;
    userRate?: PublicUserRate;
    episodes?: number;
    episodesAired?: number;
    rating?: string | undefined;
    duration?: number;
    updatedAt?: Date | undefined;
    nextEpisodeAt?: Date | undefined;
    studios?: Studio[] | undefined;
    videos?: Video[] | undefined;
    screens?: Screenshots[] | undefined;
}

export class AnimePreview implements IAnimePreview {
    id?: number;
    name?: string | undefined;
    russian?: string | undefined;
    image?: Image;
    url?: string | undefined;
    kind?: string | undefined;
    score?: string | undefined;
    status?: string | undefined;
    airedOn?: Date | undefined;
    releasedOn?: Date | undefined;
    episodes?: number;
    episodesAired?: number;

    constructor(data?: IAnimePreview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.russian = _data["russian"];
            this.image = _data["image"] ? Image.fromJS(_data["image"]) : <any>undefined;
            this.url = _data["url"];
            this.kind = _data["kind"];
            this.score = _data["score"];
            this.status = _data["status"];
            this.airedOn = _data["airedOn"] ? new Date(_data["airedOn"].toString()) : <any>undefined;
            this.releasedOn = _data["releasedOn"] ? new Date(_data["releasedOn"].toString()) : <any>undefined;
            this.episodes = _data["episodes"];
            this.episodesAired = _data["episodesAired"];
        }
    }

    static fromJS(data: any): AnimePreview {
        data = typeof data === 'object' ? data : {};
        let result = new AnimePreview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["russian"] = this.russian;
        data["image"] = this.image ? this.image.toJSON() : <any>undefined;
        data["url"] = this.url;
        data["kind"] = this.kind;
        data["score"] = this.score;
        data["status"] = this.status;
        data["airedOn"] = this.airedOn ? this.airedOn.toISOString() : <any>undefined;
        data["releasedOn"] = this.releasedOn ? this.releasedOn.toISOString() : <any>undefined;
        data["episodes"] = this.episodes;
        data["episodesAired"] = this.episodesAired;
        return data;
    }
}

export interface IAnimePreview {
    id?: number;
    name?: string | undefined;
    russian?: string | undefined;
    image?: Image;
    url?: string | undefined;
    kind?: string | undefined;
    score?: string | undefined;
    status?: string | undefined;
    airedOn?: Date | undefined;
    releasedOn?: Date | undefined;
    episodes?: number;
    episodesAired?: number;
}

export class Episode implements IEpisode {
    name?: string | undefined;
    timestamps?: Timestamp[] | undefined;

    constructor(data?: IEpisode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["timestamps"])) {
                this.timestamps = [] as any;
                for (let item of _data["timestamps"])
                    this.timestamps!.push(Timestamp.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Episode {
        data = typeof data === 'object' ? data : {};
        let result = new Episode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.timestamps)) {
            data["timestamps"] = [];
            for (let item of this.timestamps)
                data["timestamps"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEpisode {
    name?: string | undefined;
    timestamps?: Timestamp[] | undefined;
}

export class Franchise implements IFranchise {
    links?: Link[] | undefined;
    nodes?: Node[] | undefined;
    currentId?: number;

    constructor(data?: IFranchise) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["links"])) {
                this.links = [] as any;
                for (let item of _data["links"])
                    this.links!.push(Link.fromJS(item));
            }
            if (Array.isArray(_data["nodes"])) {
                this.nodes = [] as any;
                for (let item of _data["nodes"])
                    this.nodes!.push(Node.fromJS(item));
            }
            this.currentId = _data["currentId"];
        }
    }

    static fromJS(data: any): Franchise {
        data = typeof data === 'object' ? data : {};
        let result = new Franchise();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.links)) {
            data["links"] = [];
            for (let item of this.links)
                data["links"].push(item.toJSON());
        }
        if (Array.isArray(this.nodes)) {
            data["nodes"] = [];
            for (let item of this.nodes)
                data["nodes"].push(item.toJSON());
        }
        data["currentId"] = this.currentId;
        return data;
    }
}

export interface IFranchise {
    links?: Link[] | undefined;
    nodes?: Node[] | undefined;
    currentId?: number;
}

export class Genre implements IGenre {
    id?: number;
    name?: string | undefined;
    russian?: string | undefined;
    kind?: string | undefined;

    constructor(data?: IGenre) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.russian = _data["russian"];
            this.kind = _data["kind"];
        }
    }

    static fromJS(data: any): Genre {
        data = typeof data === 'object' ? data : {};
        let result = new Genre();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["russian"] = this.russian;
        data["kind"] = this.kind;
        return data;
    }
}

export interface IGenre {
    id?: number;
    name?: string | undefined;
    russian?: string | undefined;
    kind?: string | undefined;
}

export class Image implements IImage {
    original?: string | undefined;
    preview?: string | undefined;
    x96?: string | undefined;
    x48?: string | undefined;

    constructor(data?: IImage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.original = _data["original"];
            this.preview = _data["preview"];
            this.x96 = _data["x96"];
            this.x48 = _data["x48"];
        }
    }

    static fromJS(data: any): Image {
        data = typeof data === 'object' ? data : {};
        let result = new Image();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["original"] = this.original;
        data["preview"] = this.preview;
        data["x96"] = this.x96;
        data["x48"] = this.x48;
        return data;
    }
}

export interface IImage {
    original?: string | undefined;
    preview?: string | undefined;
    x96?: string | undefined;
    x48?: string | undefined;
}

export class KodikAnime implements IKodikAnime {
    time?: string | undefined;
    total?: number;
    results?: Result[] | undefined;

    constructor(data?: IKodikAnime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.time = _data["time"];
            this.total = _data["total"];
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Result.fromJS(item));
            }
        }
    }

    static fromJS(data: any): KodikAnime {
        data = typeof data === 'object' ? data : {};
        let result = new KodikAnime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["time"] = this.time;
        data["total"] = this.total;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data;
    }
}

export interface IKodikAnime {
    time?: string | undefined;
    total?: number;
    results?: Result[] | undefined;
}

export class Link implements ILink {
    id?: number;
    sourceId?: number;
    targetId?: number;
    source?: number | undefined;
    target?: number | undefined;
    weight?: number | undefined;
    relation?: string | undefined;

    constructor(data?: ILink) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sourceId = _data["sourceId"];
            this.targetId = _data["targetId"];
            this.source = _data["source"];
            this.target = _data["target"];
            this.weight = _data["weight"];
            this.relation = _data["relation"];
        }
    }

    static fromJS(data: any): Link {
        data = typeof data === 'object' ? data : {};
        let result = new Link();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sourceId"] = this.sourceId;
        data["targetId"] = this.targetId;
        data["source"] = this.source;
        data["target"] = this.target;
        data["weight"] = this.weight;
        data["relation"] = this.relation;
        return data;
    }
}

export interface ILink {
    id?: number;
    sourceId?: number;
    targetId?: number;
    source?: number | undefined;
    target?: number | undefined;
    weight?: number | undefined;
    relation?: string | undefined;
}

export class LoginDto implements ILoginDto {
    username?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginDto {
    username?: string | undefined;
    password?: string | undefined;
}

export class MaterialData implements IMaterialData {
    title?: string | undefined;
    year?: number;
    tagline?: string | undefined;
    description?: string | undefined;
    poster_Url?: string | undefined;

    constructor(data?: IMaterialData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.year = _data["year"];
            this.tagline = _data["tagline"];
            this.description = _data["description"];
            this.poster_Url = _data["poster_Url"];
        }
    }

    static fromJS(data: any): MaterialData {
        data = typeof data === 'object' ? data : {};
        let result = new MaterialData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["year"] = this.year;
        data["tagline"] = this.tagline;
        data["description"] = this.description;
        data["poster_Url"] = this.poster_Url;
        return data;
    }
}

export interface IMaterialData {
    title?: string | undefined;
    year?: number;
    tagline?: string | undefined;
    description?: string | undefined;
    poster_Url?: string | undefined;
}

export class Node implements INode {
    id?: number;
    date?: number | undefined;
    name?: string | undefined;
    imageUrl?: string | undefined;
    url?: string | undefined;
    year?: any | undefined;
    kind?: string | undefined;
    weight?: number;

    constructor(data?: INode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.date = _data["date"];
            this.name = _data["name"];
            this.imageUrl = _data["imageUrl"];
            this.url = _data["url"];
            this.year = _data["year"];
            this.kind = _data["kind"];
            this.weight = _data["weight"];
        }
    }

    static fromJS(data: any): Node {
        data = typeof data === 'object' ? data : {};
        let result = new Node();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["date"] = this.date;
        data["name"] = this.name;
        data["imageUrl"] = this.imageUrl;
        data["url"] = this.url;
        data["year"] = this.year;
        data["kind"] = this.kind;
        data["weight"] = this.weight;
        return data;
    }
}

export interface INode {
    id?: number;
    date?: number | undefined;
    name?: string | undefined;
    imageUrl?: string | undefined;
    url?: string | undefined;
    year?: any | undefined;
    kind?: string | undefined;
    weight?: number;
}

export class PublicUserRate implements IPublicUserRate {
    id?: number;
    score?: number;
    status?: string | undefined;
    rewatches?: number | undefined;
    episodes?: number | undefined;
    volumes?: number | undefined;
    chapters?: number | undefined;
    text?: string | undefined;
    textHtml?: string | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;

    constructor(data?: IPublicUserRate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.score = _data["score"];
            this.status = _data["status"];
            this.rewatches = _data["rewatches"];
            this.episodes = _data["episodes"];
            this.volumes = _data["volumes"];
            this.chapters = _data["chapters"];
            this.text = _data["text"];
            this.textHtml = _data["textHtml"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PublicUserRate {
        data = typeof data === 'object' ? data : {};
        let result = new PublicUserRate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["score"] = this.score;
        data["status"] = this.status;
        data["rewatches"] = this.rewatches;
        data["episodes"] = this.episodes;
        data["volumes"] = this.volumes;
        data["chapters"] = this.chapters;
        data["text"] = this.text;
        data["textHtml"] = this.textHtml;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPublicUserRate {
    id?: number;
    score?: number;
    status?: string | undefined;
    rewatches?: number | undefined;
    episodes?: number | undefined;
    volumes?: number | undefined;
    chapters?: number | undefined;
    text?: string | undefined;
    textHtml?: string | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
}

export class Rate implements IRate {

    constructor(data?: IRate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Rate {
        data = typeof data === 'object' ? data : {};
        let result = new Rate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IRate {
}

export class Result implements IResult {
    shikimori_Id?: string | undefined;
    type?: string | undefined;
    link?: string | undefined;
    title?: string | undefined;
    title_Orig?: string | undefined;
    other_Title?: string | undefined;
    translation?: Translation;
    year?: number;
    episodes_Count?: number | undefined;
    screenshots?: string[] | undefined;
    material_Data?: MaterialData;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shikimori_Id = _data["shikimori_Id"];
            this.type = _data["type"];
            this.link = _data["link"];
            this.title = _data["title"];
            this.title_Orig = _data["title_Orig"];
            this.other_Title = _data["other_Title"];
            this.translation = _data["translation"] ? Translation.fromJS(_data["translation"]) : <any>undefined;
            this.year = _data["year"];
            this.episodes_Count = _data["episodes_Count"];
            if (Array.isArray(_data["screenshots"])) {
                this.screenshots = [] as any;
                for (let item of _data["screenshots"])
                    this.screenshots!.push(item);
            }
            this.material_Data = _data["material_Data"] ? MaterialData.fromJS(_data["material_Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shikimori_Id"] = this.shikimori_Id;
        data["type"] = this.type;
        data["link"] = this.link;
        data["title"] = this.title;
        data["title_Orig"] = this.title_Orig;
        data["other_Title"] = this.other_Title;
        data["translation"] = this.translation ? this.translation.toJSON() : <any>undefined;
        data["year"] = this.year;
        data["episodes_Count"] = this.episodes_Count;
        if (Array.isArray(this.screenshots)) {
            data["screenshots"] = [];
            for (let item of this.screenshots)
                data["screenshots"].push(item);
        }
        data["material_Data"] = this.material_Data ? this.material_Data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IResult {
    shikimori_Id?: string | undefined;
    type?: string | undefined;
    link?: string | undefined;
    title?: string | undefined;
    title_Orig?: string | undefined;
    other_Title?: string | undefined;
    translation?: Translation;
    year?: number;
    episodes_Count?: number | undefined;
    screenshots?: string[] | undefined;
    material_Data?: MaterialData;
}

export class Screenshots implements IScreenshots {
    original?: string | undefined;
    preview?: string | undefined;

    constructor(data?: IScreenshots) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.original = _data["original"];
            this.preview = _data["preview"];
        }
    }

    static fromJS(data: any): Screenshots {
        data = typeof data === 'object' ? data : {};
        let result = new Screenshots();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["original"] = this.original;
        data["preview"] = this.preview;
        return data;
    }
}

export interface IScreenshots {
    original?: string | undefined;
    preview?: string | undefined;
}

export class ShikimoriAnime implements IShikimoriAnime {
    id?: number;
    name?: string | undefined;
    russian?: string | undefined;
    image?: Image;
    url?: string | undefined;
    kind?: string | undefined;
    score?: string | undefined;
    status?: string | undefined;
    airedOn?: Date | undefined;
    releasedOn?: Date | undefined;
    episodes?: number;
    episodesAired?: number;

    constructor(data?: IShikimoriAnime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.russian = _data["russian"];
            this.image = _data["image"] ? Image.fromJS(_data["image"]) : <any>undefined;
            this.url = _data["url"];
            this.kind = _data["kind"];
            this.score = _data["score"];
            this.status = _data["status"];
            this.airedOn = _data["airedOn"] ? new Date(_data["airedOn"].toString()) : <any>undefined;
            this.releasedOn = _data["releasedOn"] ? new Date(_data["releasedOn"].toString()) : <any>undefined;
            this.episodes = _data["episodes"];
            this.episodesAired = _data["episodesAired"];
        }
    }

    static fromJS(data: any): ShikimoriAnime {
        data = typeof data === 'object' ? data : {};
        let result = new ShikimoriAnime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["russian"] = this.russian;
        data["image"] = this.image ? this.image.toJSON() : <any>undefined;
        data["url"] = this.url;
        data["kind"] = this.kind;
        data["score"] = this.score;
        data["status"] = this.status;
        data["airedOn"] = this.airedOn ? this.airedOn.toISOString() : <any>undefined;
        data["releasedOn"] = this.releasedOn ? this.releasedOn.toISOString() : <any>undefined;
        data["episodes"] = this.episodes;
        data["episodesAired"] = this.episodesAired;
        return data;
    }
}

export interface IShikimoriAnime {
    id?: number;
    name?: string | undefined;
    russian?: string | undefined;
    image?: Image;
    url?: string | undefined;
    kind?: string | undefined;
    score?: string | undefined;
    status?: string | undefined;
    airedOn?: Date | undefined;
    releasedOn?: Date | undefined;
    episodes?: number;
    episodesAired?: number;
}

export class ShikimoriRelated implements IShikimoriRelated {
    relation?: string | undefined;
    relationRussian?: string | undefined;
    anime?: ShikimoriAnime;

    constructor(data?: IShikimoriRelated) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.relation = _data["relation"];
            this.relationRussian = _data["relationRussian"];
            this.anime = _data["anime"] ? ShikimoriAnime.fromJS(_data["anime"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ShikimoriRelated {
        data = typeof data === 'object' ? data : {};
        let result = new ShikimoriRelated();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["relation"] = this.relation;
        data["relationRussian"] = this.relationRussian;
        data["anime"] = this.anime ? this.anime.toJSON() : <any>undefined;
        return data;
    }
}

export interface IShikimoriRelated {
    relation?: string | undefined;
    relationRussian?: string | undefined;
    anime?: ShikimoriAnime;
}

export class Show implements IShow {
    episodes?: Episode[] | undefined;

    constructor(data?: IShow) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["episodes"])) {
                this.episodes = [] as any;
                for (let item of _data["episodes"])
                    this.episodes!.push(Episode.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Show {
        data = typeof data === 'object' ? data : {};
        let result = new Show();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.episodes)) {
            data["episodes"] = [];
            for (let item of this.episodes)
                data["episodes"].push(item.toJSON());
        }
        return data;
    }
}

export interface IShow {
    episodes?: Episode[] | undefined;
}

export class Studio implements IStudio {
    id?: number;
    name?: string | undefined;
    filteredName?: string | undefined;
    real?: boolean | undefined;
    image?: string | undefined;

    constructor(data?: IStudio) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.filteredName = _data["filteredName"];
            this.real = _data["real"];
            this.image = _data["image"];
        }
    }

    static fromJS(data: any): Studio {
        data = typeof data === 'object' ? data : {};
        let result = new Studio();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["filteredName"] = this.filteredName;
        data["real"] = this.real;
        data["image"] = this.image;
        return data;
    }
}

export interface IStudio {
    id?: number;
    name?: string | undefined;
    filteredName?: string | undefined;
    real?: boolean | undefined;
    image?: string | undefined;
}

export class Timestamp implements ITimestamp {
    type?: Type;
    at?: number;

    constructor(data?: ITimestamp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"] ? Type.fromJS(_data["type"]) : <any>undefined;
            this.at = _data["at"];
        }
    }

    static fromJS(data: any): Timestamp {
        data = typeof data === 'object' ? data : {};
        let result = new Timestamp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type ? this.type.toJSON() : <any>undefined;
        data["at"] = this.at;
        return data;
    }
}

export interface ITimestamp {
    type?: Type;
    at?: number;
}

export class Translation implements ITranslation {
    id?: number;
    title?: string | undefined;
    type?: string | undefined;

    constructor(data?: ITranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): Translation {
        data = typeof data === 'object' ? data : {};
        let result = new Translation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["type"] = this.type;
        return data;
    }
}

export interface ITranslation {
    id?: number;
    title?: string | undefined;
    type?: string | undefined;
}

export class Type implements IType {
    name?: string | undefined;

    constructor(data?: IType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Type {
        data = typeof data === 'object' ? data : {};
        let result = new Type();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface IType {
    name?: string | undefined;
}

export class UserDto implements IUserDto {
    id?: string;
    username?: string | undefined;
    email?: string | undefined;
    avatarUrl?: string | undefined;
    lastWatchedAnimes?: UserWatchingAnime[] | undefined;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.email = _data["email"];
            this.avatarUrl = _data["avatarUrl"];
            if (Array.isArray(_data["lastWatchedAnimes"])) {
                this.lastWatchedAnimes = [] as any;
                for (let item of _data["lastWatchedAnimes"])
                    this.lastWatchedAnimes!.push(UserWatchingAnime.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["email"] = this.email;
        data["avatarUrl"] = this.avatarUrl;
        if (Array.isArray(this.lastWatchedAnimes)) {
            data["lastWatchedAnimes"] = [];
            for (let item of this.lastWatchedAnimes)
                data["lastWatchedAnimes"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUserDto {
    id?: string;
    username?: string | undefined;
    email?: string | undefined;
    avatarUrl?: string | undefined;
    lastWatchedAnimes?: UserWatchingAnime[] | undefined;
}

export class UserWatchingAnime implements IUserWatchingAnime {
    id?: string;
    animeId?: number;
    episodesWatched?: number;
    nextEpisode?: number;
    episodesTotal?: number;
    title?: string | undefined;
    posterUrl?: string | undefined;
    rating?: string | undefined;
    secondsWatched?: number;

    constructor(data?: IUserWatchingAnime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.animeId = _data["animeId"];
            this.episodesWatched = _data["episodesWatched"];
            this.nextEpisode = _data["nextEpisode"];
            this.episodesTotal = _data["episodesTotal"];
            this.title = _data["title"];
            this.posterUrl = _data["posterUrl"];
            this.rating = _data["rating"];
            this.secondsWatched = _data["secondsWatched"];
        }
    }

    static fromJS(data: any): UserWatchingAnime {
        data = typeof data === 'object' ? data : {};
        let result = new UserWatchingAnime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["animeId"] = this.animeId;
        data["episodesWatched"] = this.episodesWatched;
        data["nextEpisode"] = this.nextEpisode;
        data["episodesTotal"] = this.episodesTotal;
        data["title"] = this.title;
        data["posterUrl"] = this.posterUrl;
        data["rating"] = this.rating;
        data["secondsWatched"] = this.secondsWatched;
        return data;
    }
}

export interface IUserWatchingAnime {
    id?: string;
    animeId?: number;
    episodesWatched?: number;
    nextEpisode?: number;
    episodesTotal?: number;
    title?: string | undefined;
    posterUrl?: string | undefined;
    rating?: string | undefined;
    secondsWatched?: number;
}

export class Video implements IVideo {
    id?: number;
    url?: string | undefined;
    imageUrl?: string | undefined;
    playerUrl?: string | undefined;
    name?: string | undefined;
    kind?: string | undefined;
    hosting?: string | undefined;

    constructor(data?: IVideo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.url = _data["url"];
            this.imageUrl = _data["imageUrl"];
            this.playerUrl = _data["playerUrl"];
            this.name = _data["name"];
            this.kind = _data["kind"];
            this.hosting = _data["hosting"];
        }
    }

    static fromJS(data: any): Video {
        data = typeof data === 'object' ? data : {};
        let result = new Video();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["url"] = this.url;
        data["imageUrl"] = this.imageUrl;
        data["playerUrl"] = this.playerUrl;
        data["name"] = this.name;
        data["kind"] = this.kind;
        data["hosting"] = this.hosting;
        return data;
    }
}

export interface IVideo {
    id?: number;
    url?: string | undefined;
    imageUrl?: string | undefined;
    playerUrl?: string | undefined;
    name?: string | undefined;
    kind?: string | undefined;
    hosting?: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}