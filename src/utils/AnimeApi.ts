//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming



export class AddCommentDto implements IAddCommentDto {
    animeId?: number;
    text?: string | undefined;

    constructor(data?: IAddCommentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.animeId = _data["animeId"];
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): AddCommentDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddCommentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["animeId"] = this.animeId;
        data["text"] = this.text;
        return data;
    }
}

export interface IAddCommentDto {
    animeId?: number;
    text?: string | undefined;
}

export class Anime implements IAnime {
    shikimoriDetails?: AnimeID;
    kodikDetails?: KodikResults;
    timestamps?: Show;

    constructor(data?: IAnime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shikimoriDetails = _data["shikimoriDetails"] ? AnimeID.fromJS(_data["shikimoriDetails"]) : <any>undefined;
            this.kodikDetails = _data["kodikDetails"] ? KodikResults.fromJS(_data["kodikDetails"]) : <any>undefined;
            this.timestamps = _data["timestamps"] ? Show.fromJS(_data["timestamps"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Anime {
        data = typeof data === 'object' ? data : {};
        let result = new Anime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shikimoriDetails"] = this.shikimoriDetails ? this.shikimoriDetails.toJSON() : <any>undefined;
        data["kodikDetails"] = this.kodikDetails ? this.kodikDetails.toJSON() : <any>undefined;
        data["timestamps"] = this.timestamps ? this.timestamps.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAnime {
    shikimoriDetails?: AnimeID;
    kodikDetails?: KodikResults;
    timestamps?: Show;
}

export class AnimeID implements IAnimeID {
    id?: number;
    name?: string | undefined;
    russian?: string | undefined;
    image?: Image;
    url?: string | undefined;
    kind?: string | undefined;
    score?: string | undefined;
    status?: string | undefined;
    airedOn?: Date | undefined;
    releasedOn?: Date | undefined;
    english?: string[] | undefined;
    japanese?: string[] | undefined;
    synonyms?: string[] | undefined;
    licenseNameRu?: string | undefined;
    description?: string | undefined;
    descriptionHtml?: string | undefined;
    descriptionSource?: string | undefined;
    franchise?: string | undefined;
    favoured?: boolean;
    anons?: boolean;
    ongoing?: boolean;
    threadId?: number | undefined;
    topicId?: number | undefined;
    myanimelistId?: number | undefined;
    ratesScoresStats?: Rate[] | undefined;
    ratesStatusesStats?: Rate[] | undefined;
    genres?: Genre[] | undefined;
    userRate?: PublicUserRate;
    episodes?: number;
    episodesAired?: number;
    rating?: string | undefined;
    duration?: number;
    updatedAt?: Date | undefined;
    nextEpisodeAt?: Date | undefined;
    studios?: Studio[] | undefined;
    videos?: Video[] | undefined;
    screens?: Screenshots[] | undefined;

    constructor(data?: IAnimeID) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.russian = _data["russian"];
            this.image = _data["image"] ? Image.fromJS(_data["image"]) : <any>undefined;
            this.url = _data["url"];
            this.kind = _data["kind"];
            this.score = _data["score"];
            this.status = _data["status"];
            this.airedOn = _data["airedOn"] ? new Date(_data["airedOn"].toString()) : <any>undefined;
            this.releasedOn = _data["releasedOn"] ? new Date(_data["releasedOn"].toString()) : <any>undefined;
            if (Array.isArray(_data["english"])) {
                this.english = [] as any;
                for (let item of _data["english"])
                    this.english!.push(item);
            }
            if (Array.isArray(_data["japanese"])) {
                this.japanese = [] as any;
                for (let item of _data["japanese"])
                    this.japanese!.push(item);
            }
            if (Array.isArray(_data["synonyms"])) {
                this.synonyms = [] as any;
                for (let item of _data["synonyms"])
                    this.synonyms!.push(item);
            }
            this.licenseNameRu = _data["licenseNameRu"];
            this.description = _data["description"];
            this.descriptionHtml = _data["descriptionHtml"];
            this.descriptionSource = _data["descriptionSource"];
            this.franchise = _data["franchise"];
            this.favoured = _data["favoured"];
            this.anons = _data["anons"];
            this.ongoing = _data["ongoing"];
            this.threadId = _data["threadId"];
            this.topicId = _data["topicId"];
            this.myanimelistId = _data["myanimelistId"];
            if (Array.isArray(_data["ratesScoresStats"])) {
                this.ratesScoresStats = [] as any;
                for (let item of _data["ratesScoresStats"])
                    this.ratesScoresStats!.push(Rate.fromJS(item));
            }
            if (Array.isArray(_data["ratesStatusesStats"])) {
                this.ratesStatusesStats = [] as any;
                for (let item of _data["ratesStatusesStats"])
                    this.ratesStatusesStats!.push(Rate.fromJS(item));
            }
            if (Array.isArray(_data["genres"])) {
                this.genres = [] as any;
                for (let item of _data["genres"])
                    this.genres!.push(Genre.fromJS(item));
            }
            this.userRate = _data["userRate"] ? PublicUserRate.fromJS(_data["userRate"]) : <any>undefined;
            this.episodes = _data["episodes"];
            this.episodesAired = _data["episodesAired"];
            this.rating = _data["rating"];
            this.duration = _data["duration"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            this.nextEpisodeAt = _data["nextEpisodeAt"] ? new Date(_data["nextEpisodeAt"].toString()) : <any>undefined;
            if (Array.isArray(_data["studios"])) {
                this.studios = [] as any;
                for (let item of _data["studios"])
                    this.studios!.push(Studio.fromJS(item));
            }
            if (Array.isArray(_data["videos"])) {
                this.videos = [] as any;
                for (let item of _data["videos"])
                    this.videos!.push(Video.fromJS(item));
            }
            if (Array.isArray(_data["screens"])) {
                this.screens = [] as any;
                for (let item of _data["screens"])
                    this.screens!.push(Screenshots.fromJS(item));
            }
        }
    }

    static fromJS(data: any): AnimeID {
        data = typeof data === 'object' ? data : {};
        let result = new AnimeID();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["russian"] = this.russian;
        data["image"] = this.image ? this.image.toJSON() : <any>undefined;
        data["url"] = this.url;
        data["kind"] = this.kind;
        data["score"] = this.score;
        data["status"] = this.status;
        data["airedOn"] = this.airedOn ? this.airedOn.toISOString() : <any>undefined;
        data["releasedOn"] = this.releasedOn ? this.releasedOn.toISOString() : <any>undefined;
        if (Array.isArray(this.english)) {
            data["english"] = [];
            for (let item of this.english)
                data["english"].push(item);
        }
        if (Array.isArray(this.japanese)) {
            data["japanese"] = [];
            for (let item of this.japanese)
                data["japanese"].push(item);
        }
        if (Array.isArray(this.synonyms)) {
            data["synonyms"] = [];
            for (let item of this.synonyms)
                data["synonyms"].push(item);
        }
        data["licenseNameRu"] = this.licenseNameRu;
        data["description"] = this.description;
        data["descriptionHtml"] = this.descriptionHtml;
        data["descriptionSource"] = this.descriptionSource;
        data["franchise"] = this.franchise;
        data["favoured"] = this.favoured;
        data["anons"] = this.anons;
        data["ongoing"] = this.ongoing;
        data["threadId"] = this.threadId;
        data["topicId"] = this.topicId;
        data["myanimelistId"] = this.myanimelistId;
        if (Array.isArray(this.ratesScoresStats)) {
            data["ratesScoresStats"] = [];
            for (let item of this.ratesScoresStats)
                data["ratesScoresStats"].push(item.toJSON());
        }
        if (Array.isArray(this.ratesStatusesStats)) {
            data["ratesStatusesStats"] = [];
            for (let item of this.ratesStatusesStats)
                data["ratesStatusesStats"].push(item.toJSON());
        }
        if (Array.isArray(this.genres)) {
            data["genres"] = [];
            for (let item of this.genres)
                data["genres"].push(item.toJSON());
        }
        data["userRate"] = this.userRate ? this.userRate.toJSON() : <any>undefined;
        data["episodes"] = this.episodes;
        data["episodesAired"] = this.episodesAired;
        data["rating"] = this.rating;
        data["duration"] = this.duration;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        data["nextEpisodeAt"] = this.nextEpisodeAt ? this.nextEpisodeAt.toISOString() : <any>undefined;
        if (Array.isArray(this.studios)) {
            data["studios"] = [];
            for (let item of this.studios)
                data["studios"].push(item.toJSON());
        }
        if (Array.isArray(this.videos)) {
            data["videos"] = [];
            for (let item of this.videos)
                data["videos"].push(item.toJSON());
        }
        if (Array.isArray(this.screens)) {
            data["screens"] = [];
            for (let item of this.screens)
                data["screens"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnimeID {
    id?: number;
    name?: string | undefined;
    russian?: string | undefined;
    image?: Image;
    url?: string | undefined;
    kind?: string | undefined;
    score?: string | undefined;
    status?: string | undefined;
    airedOn?: Date | undefined;
    releasedOn?: Date | undefined;
    english?: string[] | undefined;
    japanese?: string[] | undefined;
    synonyms?: string[] | undefined;
    licenseNameRu?: string | undefined;
    description?: string | undefined;
    descriptionHtml?: string | undefined;
    descriptionSource?: string | undefined;
    franchise?: string | undefined;
    favoured?: boolean;
    anons?: boolean;
    ongoing?: boolean;
    threadId?: number | undefined;
    topicId?: number | undefined;
    myanimelistId?: number | undefined;
    ratesScoresStats?: Rate[] | undefined;
    ratesStatusesStats?: Rate[] | undefined;
    genres?: Genre[] | undefined;
    userRate?: PublicUserRate;
    episodes?: number;
    episodesAired?: number;
    rating?: string | undefined;
    duration?: number;
    updatedAt?: Date | undefined;
    nextEpisodeAt?: Date | undefined;
    studios?: Studio[] | undefined;
    videos?: Video[] | undefined;
    screens?: Screenshots[] | undefined;
}

export class AnimePreview implements IAnimePreview {
    id?: number;
    name?: string | undefined;
    russian?: string | undefined;
    image?: Image;
    url?: string | undefined;
    kind?: string | undefined;
    score?: string | undefined;
    status?: string | undefined;
    airedOn?: Date | undefined;
    releasedOn?: Date | undefined;
    episodes?: number;
    episodesAired?: number;

    constructor(data?: IAnimePreview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.russian = _data["russian"];
            this.image = _data["image"] ? Image.fromJS(_data["image"]) : <any>undefined;
            this.url = _data["url"];
            this.kind = _data["kind"];
            this.score = _data["score"];
            this.status = _data["status"];
            this.airedOn = _data["airedOn"] ? new Date(_data["airedOn"].toString()) : <any>undefined;
            this.releasedOn = _data["releasedOn"] ? new Date(_data["releasedOn"].toString()) : <any>undefined;
            this.episodes = _data["episodes"];
            this.episodesAired = _data["episodesAired"];
        }
    }

    static fromJS(data: any): AnimePreview {
        data = typeof data === 'object' ? data : {};
        let result = new AnimePreview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["russian"] = this.russian;
        data["image"] = this.image ? this.image.toJSON() : <any>undefined;
        data["url"] = this.url;
        data["kind"] = this.kind;
        data["score"] = this.score;
        data["status"] = this.status;
        data["airedOn"] = this.airedOn ? this.airedOn.toISOString() : <any>undefined;
        data["releasedOn"] = this.releasedOn ? this.releasedOn.toISOString() : <any>undefined;
        data["episodes"] = this.episodes;
        data["episodesAired"] = this.episodesAired;
        return data;
    }
}

export interface IAnimePreview {
    id?: number;
    name?: string | undefined;
    russian?: string | undefined;
    image?: Image;
    url?: string | undefined;
    kind?: string | undefined;
    score?: string | undefined;
    status?: string | undefined;
    airedOn?: Date | undefined;
    releasedOn?: Date | undefined;
    episodes?: number;
    episodesAired?: number;
}

export class CommentAuthorDto implements ICommentAuthorDto {
    id?: string;
    username?: string | undefined;
    email?: string | undefined;
    avatarUrl?: string | undefined;

    constructor(data?: ICommentAuthorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.email = _data["email"];
            this.avatarUrl = _data["avatarUrl"];
        }
    }

    static fromJS(data: any): CommentAuthorDto {
        data = typeof data === 'object' ? data : {};
        let result = new CommentAuthorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["email"] = this.email;
        data["avatarUrl"] = this.avatarUrl;
        return data;
    }
}

export interface ICommentAuthorDto {
    id?: string;
    username?: string | undefined;
    email?: string | undefined;
    avatarUrl?: string | undefined;
}

export class CommentDto implements ICommentDto {
    id?: string;
    author?: CommentAuthorDto;
    animeId?: number;
    text?: string | undefined;

    constructor(data?: ICommentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.author = _data["author"] ? CommentAuthorDto.fromJS(_data["author"]) : <any>undefined;
            this.animeId = _data["animeId"];
            this.text = _data["text"];
        }
    }

    static fromJS(data: any): CommentDto {
        data = typeof data === 'object' ? data : {};
        let result = new CommentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["author"] = this.author ? this.author.toJSON() : <any>undefined;
        data["animeId"] = this.animeId;
        data["text"] = this.text;
        return data;
    }
}

export interface ICommentDto {
    id?: string;
    author?: CommentAuthorDto;
    animeId?: number;
    text?: string | undefined;
}

export class Episode implements IEpisode {
    name?: string | undefined;
    timestamps?: Timestamp[] | undefined;

    constructor(data?: IEpisode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["timestamps"])) {
                this.timestamps = [] as any;
                for (let item of _data["timestamps"])
                    this.timestamps!.push(Timestamp.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Episode {
        data = typeof data === 'object' ? data : {};
        let result = new Episode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.timestamps)) {
            data["timestamps"] = [];
            for (let item of this.timestamps)
                data["timestamps"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEpisode {
    name?: string | undefined;
    timestamps?: Timestamp[] | undefined;
}

export class Genre implements IGenre {
    id?: number;
    name?: string | undefined;
    russian?: string | undefined;
    kind?: string | undefined;

    constructor(data?: IGenre) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.russian = _data["russian"];
            this.kind = _data["kind"];
        }
    }

    static fromJS(data: any): Genre {
        data = typeof data === 'object' ? data : {};
        let result = new Genre();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["russian"] = this.russian;
        data["kind"] = this.kind;
        return data;
    }
}

export interface IGenre {
    id?: number;
    name?: string | undefined;
    russian?: string | undefined;
    kind?: string | undefined;
}

export class Image implements IImage {
    original?: string | undefined;
    preview?: string | undefined;
    x96?: string | undefined;
    x48?: string | undefined;

    constructor(data?: IImage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.original = _data["original"];
            this.preview = _data["preview"];
            this.x96 = _data["x96"];
            this.x48 = _data["x48"];
        }
    }

    static fromJS(data: any): Image {
        data = typeof data === 'object' ? data : {};
        let result = new Image();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["original"] = this.original;
        data["preview"] = this.preview;
        data["x96"] = this.x96;
        data["x48"] = this.x48;
        return data;
    }
}

export interface IImage {
    original?: string | undefined;
    preview?: string | undefined;
    x96?: string | undefined;
    x48?: string | undefined;
}

export class KodikResults implements IKodikResults {
    time?: string | undefined;
    total?: number;
    results?: Result[] | undefined;

    constructor(data?: IKodikResults) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.time = _data["time"];
            this.total = _data["total"];
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Result.fromJS(item));
            }
        }
    }

    static fromJS(data: any): KodikResults {
        data = typeof data === 'object' ? data : {};
        let result = new KodikResults();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["time"] = this.time;
        data["total"] = this.total;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data;
    }
}

export interface IKodikResults {
    time?: string | undefined;
    total?: number;
    results?: Result[] | undefined;
}

export class LoginDto implements ILoginDto {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginDto {
    email?: string | undefined;
    password?: string | undefined;
}

export class MaterialData implements IMaterialData {
    title?: string | undefined;
    year?: number | undefined;
    tagline?: string | undefined;
    description?: string | undefined;
    poster_Url?: string | undefined;
    shikimori_rating?: number | undefined;

    constructor(data?: IMaterialData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.year = _data["year"];
            this.tagline = _data["tagline"];
            this.description = _data["description"];
            this.poster_Url = _data["poster_Url"];
            this.shikimori_rating = _data["shikimori_rating"];
        }
    }

    static fromJS(data: any): MaterialData {
        data = typeof data === 'object' ? data : {};
        let result = new MaterialData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["year"] = this.year;
        data["tagline"] = this.tagline;
        data["description"] = this.description;
        data["poster_Url"] = this.poster_Url;
        data["shikimori_rating"] = this.shikimori_rating;
        return data;
    }
}

export interface IMaterialData {
    title?: string | undefined;
    year?: number | undefined;
    tagline?: string | undefined;
    description?: string | undefined;
    poster_Url?: string | undefined;
    shikimori_rating?: number | undefined;
}

export class PublicUserRate implements IPublicUserRate {
    id?: number;
    score?: number;
    status?: string | undefined;
    rewatches?: number | undefined;
    episodes?: number | undefined;
    volumes?: number | undefined;
    chapters?: number | undefined;
    text?: string | undefined;
    textHtml?: string | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;

    constructor(data?: IPublicUserRate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.score = _data["score"];
            this.status = _data["status"];
            this.rewatches = _data["rewatches"];
            this.episodes = _data["episodes"];
            this.volumes = _data["volumes"];
            this.chapters = _data["chapters"];
            this.text = _data["text"];
            this.textHtml = _data["textHtml"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PublicUserRate {
        data = typeof data === 'object' ? data : {};
        let result = new PublicUserRate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["score"] = this.score;
        data["status"] = this.status;
        data["rewatches"] = this.rewatches;
        data["episodes"] = this.episodes;
        data["volumes"] = this.volumes;
        data["chapters"] = this.chapters;
        data["text"] = this.text;
        data["textHtml"] = this.textHtml;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPublicUserRate {
    id?: number;
    score?: number;
    status?: string | undefined;
    rewatches?: number | undefined;
    episodes?: number | undefined;
    volumes?: number | undefined;
    chapters?: number | undefined;
    text?: string | undefined;
    textHtml?: string | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
}

export class Rate implements IRate {

    constructor(data?: IRate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): Rate {
        data = typeof data === 'object' ? data : {};
        let result = new Rate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IRate {
}

export class RegisterDto implements IRegisterDto {
    username?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: IRegisterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): RegisterDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IRegisterDto {
    username?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
}

export class Result implements IResult {
    shikimori_Id?: string | undefined;
    type?: string | undefined;
    link?: string | undefined;
    title?: string | undefined;
    title_Orig?: string | undefined;
    other_Title?: string | undefined;
    translation?: Translation;
    year?: number;
    episodes_Count?: number | undefined;
    screenshots?: string[] | undefined;
    material_Data?: MaterialData;

    constructor(data?: IResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shikimori_Id = _data["shikimori_Id"];
            this.type = _data["type"];
            this.link = _data["link"];
            this.title = _data["title"];
            this.title_Orig = _data["title_Orig"];
            this.other_Title = _data["other_Title"];
            this.translation = _data["translation"] ? Translation.fromJS(_data["translation"]) : <any>undefined;
            this.year = _data["year"];
            this.episodes_Count = _data["episodes_Count"];
            if (Array.isArray(_data["screenshots"])) {
                this.screenshots = [] as any;
                for (let item of _data["screenshots"])
                    this.screenshots!.push(item);
            }
            this.material_Data = _data["material_Data"] ? MaterialData.fromJS(_data["material_Data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shikimori_Id"] = this.shikimori_Id;
        data["type"] = this.type;
        data["link"] = this.link;
        data["title"] = this.title;
        data["title_Orig"] = this.title_Orig;
        data["other_Title"] = this.other_Title;
        data["translation"] = this.translation ? this.translation.toJSON() : <any>undefined;
        data["year"] = this.year;
        data["episodes_Count"] = this.episodes_Count;
        if (Array.isArray(this.screenshots)) {
            data["screenshots"] = [];
            for (let item of this.screenshots)
                data["screenshots"].push(item);
        }
        data["material_Data"] = this.material_Data ? this.material_Data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IResult {
    shikimori_Id?: string | undefined;
    type?: string | undefined;
    link?: string | undefined;
    title?: string | undefined;
    title_Orig?: string | undefined;
    other_Title?: string | undefined;
    translation?: Translation;
    year?: number;
    episodes_Count?: number | undefined;
    screenshots?: string[] | undefined;
    material_Data?: MaterialData;
}

export class Screenshots implements IScreenshots {
    original?: string | undefined;
    preview?: string | undefined;

    constructor(data?: IScreenshots) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.original = _data["original"];
            this.preview = _data["preview"];
        }
    }

    static fromJS(data: any): Screenshots {
        data = typeof data === 'object' ? data : {};
        let result = new Screenshots();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["original"] = this.original;
        data["preview"] = this.preview;
        return data;
    }
}

export interface IScreenshots {
    original?: string | undefined;
    preview?: string | undefined;
}

export class ShikimoriRelated implements IShikimoriRelated {
    relation?: string | undefined;
    relationRussian?: string | undefined;
    anime?: AnimePreview;

    constructor(data?: IShikimoriRelated) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.relation = _data["relation"];
            this.relationRussian = _data["relationRussian"];
            this.anime = _data["anime"] ? AnimePreview.fromJS(_data["anime"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ShikimoriRelated {
        data = typeof data === 'object' ? data : {};
        let result = new ShikimoriRelated();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["relation"] = this.relation;
        data["relationRussian"] = this.relationRussian;
        data["anime"] = this.anime ? this.anime.toJSON() : <any>undefined;
        return data;
    }
}

export interface IShikimoriRelated {
    relation?: string | undefined;
    relationRussian?: string | undefined;
    anime?: AnimePreview;
}

export class Show implements IShow {
    episodes?: Episode[] | undefined;

    constructor(data?: IShow) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["episodes"])) {
                this.episodes = [] as any;
                for (let item of _data["episodes"])
                    this.episodes!.push(Episode.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Show {
        data = typeof data === 'object' ? data : {};
        let result = new Show();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.episodes)) {
            data["episodes"] = [];
            for (let item of this.episodes)
                data["episodes"].push(item.toJSON());
        }
        return data;
    }
}

export interface IShow {
    episodes?: Episode[] | undefined;
}

export class Studio implements IStudio {
    id?: number;
    name?: string | undefined;
    filteredName?: string | undefined;
    real?: boolean | undefined;
    image?: string | undefined;

    constructor(data?: IStudio) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.filteredName = _data["filteredName"];
            this.real = _data["real"];
            this.image = _data["image"];
        }
    }

    static fromJS(data: any): Studio {
        data = typeof data === 'object' ? data : {};
        let result = new Studio();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["filteredName"] = this.filteredName;
        data["real"] = this.real;
        data["image"] = this.image;
        return data;
    }
}

export interface IStudio {
    id?: number;
    name?: string | undefined;
    filteredName?: string | undefined;
    real?: boolean | undefined;
    image?: string | undefined;
}

export class TierlistAnime implements ITierlistAnime {
    id?: string;
    position?: number;
    animeId?: number;
    episodesTotal?: number;
    title?: string | undefined;
    posterUrl?: string | undefined;
    rating?: string | undefined;

    constructor(data?: ITierlistAnime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.position = _data["position"];
            this.animeId = _data["animeId"];
            this.episodesTotal = _data["episodesTotal"];
            this.title = _data["title"];
            this.posterUrl = _data["posterUrl"];
            this.rating = _data["rating"];
        }
    }

    static fromJS(data: any): TierlistAnime {
        data = typeof data === 'object' ? data : {};
        let result = new TierlistAnime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["position"] = this.position;
        data["animeId"] = this.animeId;
        data["episodesTotal"] = this.episodesTotal;
        data["title"] = this.title;
        data["posterUrl"] = this.posterUrl;
        data["rating"] = this.rating;
        return data;
    }
}

export interface ITierlistAnime {
    id?: string;
    position?: number;
    animeId?: number;
    episodesTotal?: number;
    title?: string | undefined;
    posterUrl?: string | undefined;
    rating?: string | undefined;
}

export class Timestamp implements ITimestamp {
    type?: Type;
    at?: number;

    constructor(data?: ITimestamp) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"] ? Type.fromJS(_data["type"]) : <any>undefined;
            this.at = _data["at"];
        }
    }

    static fromJS(data: any): Timestamp {
        data = typeof data === 'object' ? data : {};
        let result = new Timestamp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type ? this.type.toJSON() : <any>undefined;
        data["at"] = this.at;
        return data;
    }
}

export interface ITimestamp {
    type?: Type;
    at?: number;
}

export class Translation implements ITranslation {
    id?: number;
    title?: string | undefined;
    type?: string | undefined;

    constructor(data?: ITranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): Translation {
        data = typeof data === 'object' ? data : {};
        let result = new Translation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["type"] = this.type;
        return data;
    }
}

export interface ITranslation {
    id?: number;
    title?: string | undefined;
    type?: string | undefined;
}

export class Type implements IType {
    name?: string | undefined;

    constructor(data?: IType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): Type {
        data = typeof data === 'object' ? data : {};
        let result = new Type();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface IType {
    name?: string | undefined;
}

export class UserDto implements IUserDto {
    id?: string;
    username?: string | undefined;
    avatarUrl?: string | undefined;
    currentlyWatchingAnime?: UserWatchingAnime[] | undefined;
    watchedAnime?: UserWatchedAnime[] | undefined;
    wishlist?: WishlistAnime[] | undefined;
    tierlist?: TierlistAnime[] | undefined;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.username = _data["username"];
            this.avatarUrl = _data["avatarUrl"];
            if (Array.isArray(_data["currentlyWatchingAnime"])) {
                this.currentlyWatchingAnime = [] as any;
                for (let item of _data["currentlyWatchingAnime"])
                    this.currentlyWatchingAnime!.push(UserWatchingAnime.fromJS(item));
            }
            if (Array.isArray(_data["watchedAnime"])) {
                this.watchedAnime = [] as any;
                for (let item of _data["watchedAnime"])
                    this.watchedAnime!.push(UserWatchedAnime.fromJS(item));
            }
            if (Array.isArray(_data["wishlist"])) {
                this.wishlist = [] as any;
                for (let item of _data["wishlist"])
                    this.wishlist!.push(WishlistAnime.fromJS(item));
            }
            if (Array.isArray(_data["tierlist"])) {
                this.tierlist = [] as any;
                for (let item of _data["tierlist"])
                    this.tierlist!.push(TierlistAnime.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["username"] = this.username;
        data["avatarUrl"] = this.avatarUrl;
        if (Array.isArray(this.currentlyWatchingAnime)) {
            data["currentlyWatchingAnime"] = [];
            for (let item of this.currentlyWatchingAnime)
                data["currentlyWatchingAnime"].push(item.toJSON());
        }
        if (Array.isArray(this.watchedAnime)) {
            data["watchedAnime"] = [];
            for (let item of this.watchedAnime)
                data["watchedAnime"].push(item.toJSON());
        }
        if (Array.isArray(this.wishlist)) {
            data["wishlist"] = [];
            for (let item of this.wishlist)
                data["wishlist"].push(item.toJSON());
        }
        if (Array.isArray(this.tierlist)) {
            data["tierlist"] = [];
            for (let item of this.tierlist)
                data["tierlist"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUserDto {
    id?: string;
    username?: string | undefined;
    avatarUrl?: string | undefined;
    currentlyWatchingAnime?: UserWatchingAnime[] | undefined;
    watchedAnime?: UserWatchedAnime[] | undefined;
    wishlist?: WishlistAnime[] | undefined;
    tierlist?: TierlistAnime[] | undefined;
}

export class UserWatchedAnime implements IUserWatchedAnime {
    id?: string;
    animeId?: number;
    currentEpisode?: number;
    episodesTotal?: number;
    title?: string | undefined;
    posterUrl?: string | undefined;
    rating?: string | undefined;
    userScore?: number | undefined;

    constructor(data?: IUserWatchedAnime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.animeId = _data["animeId"];
            this.currentEpisode = _data["currentEpisode"];
            this.episodesTotal = _data["episodesTotal"];
            this.title = _data["title"];
            this.posterUrl = _data["posterUrl"];
            this.rating = _data["rating"];
            this.userScore = _data["userScore"];
        }
    }

    static fromJS(data: any): UserWatchedAnime {
        data = typeof data === 'object' ? data : {};
        let result = new UserWatchedAnime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["animeId"] = this.animeId;
        data["currentEpisode"] = this.currentEpisode;
        data["episodesTotal"] = this.episodesTotal;
        data["title"] = this.title;
        data["posterUrl"] = this.posterUrl;
        data["rating"] = this.rating;
        data["userScore"] = this.userScore;
        return data;
    }
}

export interface IUserWatchedAnime {
    id?: string;
    animeId?: number;
    currentEpisode?: number;
    episodesTotal?: number;
    title?: string | undefined;
    posterUrl?: string | undefined;
    rating?: string | undefined;
    userScore?: number | undefined;
}

export class UserWatchingAnime implements IUserWatchingAnime {
    id?: string;
    animeId?: number;
    currentEpisode?: number;
    episodesTotal?: number;
    title?: string | undefined;
    posterUrl?: string | undefined;
    rating?: string | undefined;
    secondsWatched?: number;
    secondsTotal?: number;
    kind?: string | undefined;

    constructor(data?: IUserWatchingAnime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.animeId = _data["animeId"];
            this.currentEpisode = _data["currentEpisode"];
            this.episodesTotal = _data["episodesTotal"];
            this.title = _data["title"];
            this.posterUrl = _data["posterUrl"];
            this.rating = _data["rating"];
            this.secondsWatched = _data["secondsWatched"];
            this.secondsTotal = _data["secondsTotal"];
            this.kind = _data["kind"];
        }
    }

    static fromJS(data: any): UserWatchingAnime {
        data = typeof data === 'object' ? data : {};
        let result = new UserWatchingAnime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["animeId"] = this.animeId;
        data["currentEpisode"] = this.currentEpisode;
        data["episodesTotal"] = this.episodesTotal;
        data["title"] = this.title;
        data["posterUrl"] = this.posterUrl;
        data["rating"] = this.rating;
        data["secondsWatched"] = this.secondsWatched;
        data["secondsTotal"] = this.secondsTotal;
        data["kind"] = this.kind;
        return data;
    }
}

export interface IUserWatchingAnime {
    id?: string;
    animeId?: number;
    currentEpisode?: number;
    episodesTotal?: number;
    title?: string | undefined;
    posterUrl?: string | undefined;
    rating?: string | undefined;
    secondsWatched?: number;
    secondsTotal?: number;
    kind?: string | undefined;
}

export class Video implements IVideo {
    id?: number;
    url?: string | undefined;
    imageUrl?: string | undefined;
    playerUrl?: string | undefined;
    name?: string | undefined;
    kind?: string | undefined;
    hosting?: string | undefined;

    constructor(data?: IVideo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.url = _data["url"];
            this.imageUrl = _data["imageUrl"];
            this.playerUrl = _data["playerUrl"];
            this.name = _data["name"];
            this.kind = _data["kind"];
            this.hosting = _data["hosting"];
        }
    }

    static fromJS(data: any): Video {
        data = typeof data === 'object' ? data : {};
        let result = new Video();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["url"] = this.url;
        data["imageUrl"] = this.imageUrl;
        data["playerUrl"] = this.playerUrl;
        data["name"] = this.name;
        data["kind"] = this.kind;
        data["hosting"] = this.hosting;
        return data;
    }
}

export interface IVideo {
    id?: number;
    url?: string | undefined;
    imageUrl?: string | undefined;
    playerUrl?: string | undefined;
    name?: string | undefined;
    kind?: string | undefined;
    hosting?: string | undefined;
}

export class WishlistAnime implements IWishlistAnime {
    id?: string;
    animeId?: number;
    episodesTotal?: number;
    title?: string | undefined;
    posterUrl?: string | undefined;
    rating?: string | undefined;
    kind?: string | undefined;

    constructor(data?: IWishlistAnime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.animeId = _data["animeId"];
            this.episodesTotal = _data["episodesTotal"];
            this.title = _data["title"];
            this.posterUrl = _data["posterUrl"];
            this.rating = _data["rating"];
            this.kind = _data["kind"];
        }
    }

    static fromJS(data: any): WishlistAnime {
        data = typeof data === 'object' ? data : {};
        let result = new WishlistAnime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["animeId"] = this.animeId;
        data["episodesTotal"] = this.episodesTotal;
        data["title"] = this.title;
        data["posterUrl"] = this.posterUrl;
        data["rating"] = this.rating;
        data["kind"] = this.kind;
        return data;
    }
}

export interface IWishlistAnime {
    id?: string;
    animeId?: number;
    episodesTotal?: number;
    title?: string | undefined;
    posterUrl?: string | undefined;
    rating?: string | undefined;
    kind?: string | undefined;
}

export interface FileParameter {
    data: any;
    fileName: string;
}